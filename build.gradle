/*
 * xnat-collection: build.gradle
 * XNAT https://www.xnat.org
 * Copyright (c) 2020, Washington University School of Medicine
 * All Rights Reserved
 *
 * Released under the Simplified BSD.
 */

buildscript {
    ext {
        vXnat = "1.8.0-SNAPSHOT"
    }
    repositories {
        mavenLocal()
        maven { url "https://plugins.gradle.org/m2" }
        jcenter()
        mavenCentral()
        maven { url "https://nrgxnat.jfrog.io/nrgxnat/libs-release" }
        maven { url "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot" }
    }
    dependencies {
        classpath "com.palantir.gradle.gitversion:gradle-git-version:0.12.3"
        classpath "gradle.plugin.com.dorongold.plugins:task-tree:1.5"
        classpath "io.franzbecker:gradle-lombok:4.0.0"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.9.RELEASE"
        classpath "org.nrg.xnat.build:xnat-data-builder:${vXnat}"
    }
}

apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "jacoco"
apply plugin: "java"
apply plugin: "maven-publish"
apply plugin: "com.dorongold.task-tree"
apply plugin: "com.palantir.git-version"
apply plugin: "io.spring.dependency-management"
apply plugin: "io.franzbecker.gradle-lombok"
apply plugin: "org.nrg.xnat.build.xnat-data-builder"

group "org.nrg.xnatx.plugins"
version vXnat

description = "XNAT Dataset Plugin"

repositories {
    mavenLocal()
    maven { url "https://dcm4che.org/maven2" }
    maven { url "https://maven.imagej.net/content/groups/public" }
    jcenter()
    mavenCentral()
    maven { url "https://nrgxnat.jfrog.io/nrgxnat/libs-release" }
    maven { url "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot" }
}

sourceCompatibility = 8
targetCompatibility = 8

dependencyManagement {
    imports {
        mavenBom "org.nrg:parent:${vXnat}"
    }
    generatedPomCustomization {
        enabled = false
    }
}

dependencies {
    implementation platform("org.nrg:parent:${vXnat}")

    implementation("org.nrg.xnat:web") {
        transitive = false
    }
    implementation("org.nrg.xnat:xnat-data-models") {
        transitive = false
    }
    implementation("org.nrg.xdat:core") {
        transitive = false
    }
    implementation "org.nrg:prefs"
    implementation "org.nrg:framework"

    implementation("javax.servlet:javax.servlet-api") {
        transitive = false
    }
    implementation("org.aspectj:aspectjweaver") {
        transitive = false
    }
    implementation("turbine:turbine") {
        transitive = false
    }
    implementation("org.apache.velocity:velocity") {
        transitive = false
    }
    implementation "io.springfox:springfox-swagger2"

    compileOnly "log4j:log4j"

    testImplementation "org.nrg:test"
    testImplementation "org.springframework:spring-test"
    testImplementation "junit:junit"
    testImplementation "org.assertj:assertj-core"
}

lombok {
    version = dependencyManagement.importedProperties["lombok.version"] as String
    sha256 = dependencyManagement.importedProperties["lombok.checksum"] as String
}

jacoco {
    toolVersion = dependencyManagement.importedProperties["jacoco.version"]
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled = false
        csv.enabled = false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

// Pulls in the Jenkins BUILD_NUMBER environment variable if available.
def buildDate = new Date()
def buildNumber = System.getenv().BUILD_NUMBER?.toInteger() ?: "Manual"
def isDirty, branchName, gitHash, gitHashFull, commitDistance, lastTag, isCleanTag

try {
    def gitDetails = versionDetails()
    isDirty = gitVersion().endsWith ".dirty"
    branchName = gitDetails.branchName ?: "Unknown"
    gitHash = gitDetails.gitHash
    gitHashFull = gitDetails.gitHashFull
    commitDistance = gitDetails.commitDistance
    lastTag = gitDetails.lastTag
    isCleanTag = gitDetails.isCleanTag
} catch (IllegalArgumentException ignored) {
    logger.info "Got an error trying to read VCS metadata from git. It's possible this project is not under VCS control. Using placeholder values for manifest entries."
    isDirty = true
    branchName = "Unknown"
    gitHash = "None"
    gitHashFull = "None"
    commitDistance = 0
    lastTag = "None"
    isCleanTag = false
}

ext.gitManifest = manifest {
    attributes "Application-Name": project.description,
            "Build-Date": buildDate,
            "Build-Number": buildNumber,
            "Implementation-Version": project.version,
            "Implementation-Sha": gitHash,
            "Implementation-Sha-Full": gitHashFull,
            "Implementation-Commit": commitDistance,
            "Implementation-LastTag": lastTag,
            "Implementation-Branch": branchName,
            "Implementation-CleanTag": isCleanTag,
            "Implementation-Dirty": isDirty
}

sourceSets {
    main {
        java {
            srcDir "build/xnat-generated/src/main/java"
        }
        resources {
            srcDir "build/xnat-generated/src/main/resources"
            exclude "**/*-dev**"
        }
    }
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier "sources"
    manifest {
        from gitManifest
    }
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier "javadoc"
    manifest {
        from gitManifest
    }
    from javadoc.destinationDir
}

jar {
    dependsOn test, sourceJar, javadocJar
    manifest {
        from gitManifest
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifacts {
                artifact sourceJar
                artifact javadocJar
            }

            pom.withXml {
                def root = asNode()
                root.appendNode("name", "XNAT Data Collection Plugin")
                root.appendNode("url", "https://bitbucket.org/xnatx/xnatx-collection-plugin")
                root.appendNode("inceptionYear", "2019")

                root.appendNode("scm").with {
                    appendNode("url", "https://bitbucket.org/xnatx/xnatx-ollection-plugin")
                    appendNode("connection", "scm:https://bitbucket.org/xnatx/xnatx-collection-plugin")
                    appendNode("developerConnection", "scm:git@bitbucket.org:xnatx/xnatx-collection-plugin.git")
                }

                root.appendNode("licenses").appendNode("license").with {
                    appendNode("name", "Simplified BSD 2-Clause License")
                    appendNode("url", "https://xnat.org/about/license.php")
                    appendNode("distribution", "repo")
                }

                root.appendNode("developers").with {
                    appendNode("developer").with {
                        appendNode("id", "mfmckay")
                        appendNode("name", "Mike McKay")
                        appendNode("email", "mfmckay@wustl.edu")
                    }
                    appendNode("developer").with {
                        appendNode("id", "rherrick")
                        appendNode("name", "Rick Herrick")
                        appendNode("email", "jrherrick@wustl.edu")
                    }
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                // These properties must be set in the ~/.gradle/gradle.properties file or passed on the Gradle command
                // line in the form -PrepoUsername=foo -PrepoPassword=bar.
                username propertyWithDefault("repoUsername", "username")
                password propertyWithDefault("repoPassword", "password")
            }
            url "https://nrgxnat.jfrog.io/nrgxnat/libs-${project.version.endsWith("-SNAPSHOT") ? "snapshot" : "release"}-local"
        }
    }
}

def propertyWithDefault(String name, Object value) {
    hasProperty(name) ? property(name) : value
}
