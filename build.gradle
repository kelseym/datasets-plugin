/*
 * xnat-collection: build.gradle
 * XNAT https://www.xnat.org
 * Copyright (c) 2020, Washington University School of Medicine
 * All Rights Reserved
 *
 * Released under the Simplified BSD.
 */

buildscript {
    ext {
        vXnat = "1.7.6"
    }
    repositories {
        mavenLocal()
        maven { url "https://plugins.gradle.org/m2" }
        jcenter()
        mavenCentral()
        maven { url "https://nrgxnat.jfrog.io/nrgxnat/libs-release" }
        maven { url "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot" }
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.9.RELEASE"
        classpath "io.franzbecker:gradle-lombok:3.2.0"
        classpath "org.nrg.xnat.build:xnat-data-builder:1.7.6"
    }
}

apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "jacoco"
apply plugin: "java"
apply plugin: "maven-publish"
apply plugin: "io.spring.dependency-management"
apply plugin: "io.franzbecker.gradle-lombok"
apply plugin: "org.nrg.xnat.build.xnat-data-builder"

group "org.nrg.xnatx.plugins"
version "1.0.0-SNAPSHOT"

repositories {
    mavenLocal()
    maven { url "https://dcm4che.org/maven2" }
    maven { url "https://maven.imagej.net/content/groups/public" }
    jcenter()
    mavenCentral()
    maven { url "https://nrgxnat.jfrog.io/nrgxnat/libs-release" }
    maven { url "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot" }
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

lombok {
    version = "1.18.10"
    sha256 = "2836e954823bfcbad45e78c18896e3d01058e6f643749810c608b7005ee7b2fa"
}

dependencyManagement.imports {
    mavenBom "org.nrg:parent:${vXnat}"
}

dependencies {
    implementation("org.nrg.xnat:web") {
        transitive = false
    }
    implementation("org.nrg.xnat:xnat-data-models") {
        transitive = false
    }
    implementation("org.nrg.xdat:core") {
        transitive = false
    }
    implementation "org.nrg:prefs"
    implementation "org.nrg:framework"

    implementation("turbine:turbine") {
        transitive = false
    }
    implementation("org.apache.velocity:velocity") {
        transitive = false
    }
    // Not including explicit version info for this dependency breaks the build for some reason.
    implementation("stratum:stratum:1.0") {
        transitive = false
    }
    implementation "io.springfox:springfox-swagger2"
}

def javaVersion = JavaVersion.current()
if (javaVersion.java8Compatible || javaVersion.java9Compatible || javaVersion.java10Compatible) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption("Xdoclint:none", "-quiet")
        }
    }

    if (hasProperty("rt.17.jar")) {
        // Solution for bootstrap classpath warning and possible issues with compatibility with 1.7 libraries
        // was taken from this post on discuss.gradle.org: http://bit.ly/24xD9j0
        def rt17jar = property "rt.17.jar"
        logger.info "Using ${rt17jar} as the bootstrap class path jar."
        gradle.projectsEvaluated {
            tasks.withType(JavaCompile) {
                options.fork = true
                options.compilerArgs << "-XDignore.symbol.file"
                options.bootstrapClasspath = files(rt17jar as String)
            }
        }
    } else {
        logger.warn "No value was set for the rt.17.jar build property, but you are using a Java 8- or 9-compatible JDK. You should consider setting rt.17.jar to indicate a jar file containing the Java 1.7 run-time library:\n"
        logger.warn "\n"
        logger.warn "  ./gradlew -Prt.17.jar=rt-1.7.0_45.jar war\n"
        logger.warn "\n"
        logger.warn "You can also set this property in a gradle.properties file, either in the top level of your build folder or in the folder ~/.gradle/:\n"
        logger.warn "\n"
        logger.warn "  rt.17.jar=/home/developer/.gradle/rt.17.jar\n"
        logger.warn "\n"
        logger.warn "In some isolated instances, using a bootstrap library from a JDK version later than 1.7 can result in run-time errors.\n"
    }
} else if (!javaVersion.java7Compatible) {
    throw new BuildCancelledException("You are using a JDK version (${javaVersion}) that is not compatible with Java 7. The XNAT build will fail. Please install a JDK version of Java 7 or later.")
}

jacoco {
    toolVersion = dependencyManagement.importedProperties["jacoco.version"]
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled = false
        csv.enabled = false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

sourceSets {
    main {
        java {
            srcDir "src/main/java"
            srcDir "build/xnat-generated/src/main/java"
        }
        resources {
            srcDir "src/main/resources"
            srcDir "build/xnat-generated/src/main/resources"
        }
    }
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier "sources"
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier "javadoc"
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifacts {
                artifact sourceJar
                artifact javadocJar
            }

            pom.withXml {
                def root = asNode()
                root.appendNode("name", "XNAT Data Collection Plugin")
                root.appendNode("url", "https://bitbucket.org/xnatx/xnatx-collection-plugin")
                root.appendNode("inceptionYear", "2019")

                root.appendNode("scm").with {
                    appendNode("url", "https://bitbucket.org/xnatx/xnatx-ollection-plugin")
                    appendNode("connection", "scm:https://bitbucket.org/xnatx/xnatx-collection-plugin")
                    appendNode("developerConnection", "scm:git@bitbucket.org:xnatx/xnatx-collection-plugin.git")
                }

                root.appendNode("licenses").appendNode("license").with {
                    appendNode("name", "Simplified BSD 2-Clause License")
                    appendNode("url", "https://xnat.org/about/license.php")
                    appendNode("distribution", "repo")
                }

                root.appendNode("developers").with {
                    appendNode("developer").with {
                        appendNode("id", "mfmckay")
                        appendNode("name", "Mike McKay")
                        appendNode("email", "mfmckay@wustl.edu")
                    }
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                // These properties must be set in the ~/.gradle/gradle.properties file or passed on the Gradle command
                // line in the form -PrepoUsername=foo -PrepoPassword=bar.
                username propertyWithDefault("repoUsername", "username")
                password propertyWithDefault("repoPassword", "password")
            }
            if (project.version.endsWith("-SNAPSHOT")) {
                url "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot-local"
            } else {
                url "https://nrgxnat.jfrog.io/nrgxnat/libs-release-local"
            }
        }
    }
}

def propertyWithDefault(String name, Object value) {
    hasProperty(name) ? property(name) : value
}
