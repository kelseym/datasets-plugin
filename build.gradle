/*
 * xnat-collection: build.gradle
 * XNAT http://www.xnat.org
 * Copyright (c) 2019, Washington University School of Medicine
 * All Rights Reserved
 *
 * Released under the Simplified BSD.
 */

import org.gradle.internal.jvm.Jvm

// TODO: This block is required for the 'xnat-data-builder' plugin to function.
buildscript {
    ext {
        vXnat = '1.7.5.3'
    }
    repositories {
        mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
        mavenCentral()
        maven {
            url 'https://nrgxnat.jfrog.io/nrgxnat/libs-release'
            name 'XNAT Release Repository'
        }
        maven {
            url 'https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot'
            name 'XNAT Snapshot Repository'
        }
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE"
        classpath ("org.nrg.xnat.build:xnat-data-builder:1.7.5"){
            exclude group:'torque'
        }
        classpath ("org.nrg.xnat:web:${vXnat}"){
            exclude group: '*'
        }
    }
}

// TODO: Change the group and version to values appropriate for your plugin project.
def groupName = 'org.nrg.xnatx.plugins'
def pluginVersion = '1.0.0-SNAPSHOT'

group groupName
version pluginVersion

// TODO: This is the minimum set of Gradle plugins required to build most XNAT plugins. You may include many others, including plugins for testing and test coverage, IDE integration, and more.
apply plugin: 'io.spring.dependency-management'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'
apply plugin: 'xnat-data-builder'

// TODO: This provides access to all of these repositories for dependency resolution.
repositories {
    mavenLocal()
    maven {
        url "http://maven.imagej.net/content/groups/public"
        name "ImageJ Maven Repository"
    }
    maven {
        url 'http://dcm4che.org/maven2'
        name 'dcm4che Maven Repository'
    }
    jcenter()
    mavenCentral()
    maven {
        url 'https://nrgxnat.jfrog.io/nrgxnat/libs-release'
        name 'XNAT Release Repository'
    }
    maven {
        url 'https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot'
        name 'XNAT Snapshot Repository'
    }
    maven {
        url 'https://nrgxnat.jfrog.io/nrgxnat/ext-release'
        name 'XNAT External Release Repository'
    }
}

// TODO: As of the 1.7.x release, XNAT is built as a Java 7-compatible (i.e. JDK 1.7) application. All plugins must be 1.7 compatible as well.
sourceCompatibility = 1.7
targetCompatibility = 1.7

dependencyManagement.imports {
    mavenBom "org.nrg:parent:${vXnat}"
}

// TODO: This is a pretty minimal set of dependencies, so don't worry if you need to add more.
dependencies {
    implementation("org.nrg.xnat:web") {
        transitive = false
    }
    implementation("org.nrg.xnat:xnat-data-models") {
        transitive = false
    }
    implementation("org.nrg.xdat:core") {
        transitive = false
    }
    implementation "org.nrg:prefs"
    implementation "org.nrg:framework"

    implementation("turbine:turbine") {
        transitive = false
    }
    implementation("org.apache.velocity:velocity") {
        transitive = false
    }
    implementation("stratum:stratum") {
        transitive = false
    }

    implementation "log4j:log4j"
    implementation "io.springfox:springfox-swagger2"
}

def javaVersion = JavaVersion.current()
if (javaVersion.java8Compatible || javaVersion.java9Compatible || javaVersion.java10Compatible) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption("Xdoclint:none", "-quiet")
        }
    }

    if (hasProperty("rt.17.jar")) {
        // Solution for bootstrap classpath warning and possible issues with compatibility with 1.7 libraries
        // was taken from this post on discuss.gradle.org: http://bit.ly/24xD9j0
        def rt17jar = property "rt.17.jar"
        logger.info "Using ${rt17jar} as the bootstrap class path jar."
        gradle.projectsEvaluated {
            tasks.withType(JavaCompile) {
                options.fork = true
                options.compilerArgs << "-XDignore.symbol.file"
                options.bootstrapClasspath = files(rt17jar as String)
            }
        }
    } else {
        logger.warn "No value was set for the rt.17.jar build property, but you are using a Java 8- or 9-compatible JDK. You should consider setting rt.17.jar to indicate a jar file containing the Java 1.7 run-time library:\n"
        logger.warn "\n"
        logger.warn "  ./gradlew -Prt.17.jar=rt-1.7.0_45.jar war\n"
        logger.warn "\n"
        logger.warn "You can also set this property in a gradle.properties file, either in the top level of your build folder or in the folder ~/.gradle/:\n"
        logger.warn "\n"
        logger.warn "  rt.17.jar=/home/developer/.gradle/rt.17.jar\n"
        logger.warn "\n"
        logger.warn "In some isolated instances, using a bootstrap library from a JDK version later than 1.7 can result in run-time errors.\n"
    }
} else if (!javaVersion.java7Compatible) {
    throw new BuildCancelledException("You are using a JDK version (${javaVersion}) that is not compatible with Java 7. The XNAT build will fail. Please install a JDK version of Java 7 or later.")
}

// TODO: This configures the Jacoco test coverage plugin.
jacoco {
    toolVersion = dependencyManagement.importedProperties["jacoco.version"]
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled = false
        csv.enabled = false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

// TODO: This tells the compiler where to find source code. This isn't required in a standard build, but the XNAT data builder generates code from XNAT data-type schemas that the compiler needs to know about.
sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'build/xnat-generated/src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
            srcDir 'build/xnat-generated/src/main/resources'
        }
    }
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier "sources"
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier "javadoc"
    from javadoc.destinationDir
}

publishing.publications {
    mavenJava(MavenPublication) {
        from components.java

        artifacts {
            artifact sourceJar
            artifact javadocJar
        }

        pom.withXml {
            def root = asNode()
            root.appendNode("name", "XNAT Data Collection Plugin")
            root.appendNode("url", "https://bitbucket.org/xnatx/xnatx-collection-plugin")
            root.appendNode("inceptionYear", "2019")

            root.appendNode("scm").with {
                appendNode("url", "https://bitbucket.org/xnatx/xnatx-ollection-plugin")
                appendNode("connection", "scm:https://bitbucket.org/xnatx/xnatx-collection-plugin")
                appendNode("developerConnection", "scm:git@bitbucket.org:xnatx/xnatx-collection-plugin.git")
            }

            root.appendNode("licenses").appendNode("license").with {
                appendNode("name", "Simplified BSD 2-Clause License")
                appendNode("url", "http://xnat.org/about/license.php")
                appendNode("distribution", "repo")
            }

            root.appendNode("developers").with {
                appendNode("developer").with {
                    appendNode("id", "mfmckay")
                    appendNode("name", "Mike McKay")
                    appendNode("email", "mfmckay@wustl.edu")
                }
            }
        }
    }
}

publishing.repositories {
    maven {
        credentials {
            // These properties must be set in the ~/.gradle/gradle.properties file or passed on the Gradle command
            // line in the form -PrepoUsername=foo -PrepoPassword=bar.
            username propertyWithDefault("repoUsername", "username")
            password propertyWithDefault("repoPassword", "password")
        }
        if (project.version.endsWith("-SNAPSHOT")) {
            url "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot-local"
        } else {
            url "https://nrgxnat.jfrog.io/nrgxnat/libs-release-local"
        }
    }
}

def propertyWithDefault(String name, Object value) {
    hasProperty(name) ? property(name) : value
}
